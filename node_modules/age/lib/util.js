// Generated by CoffeeScript 1.6.3
(function() {
  var Util, exports;

  Util = (function() {
    function Util() {}

    Util.prototype.clone = function(x) {
      var clone, name, value;
      if (x != null) {
        switch (typeof x) {
          case 'null':
          case 'undefined':
            return x;
          case 'string':
          case 'number':
          case 'function':
          case 'boolean':
            return x;
          case 'object':
          case 'array':
            if (Array.isArray(x) || x instanceof Array) {
              return [].concat(x);
            } else {
              clone = {};
              for (name in x) {
                value = x[name];
                clone[name] = value;
              }
              return clone;
            }
            break;
          default:
            return x;
        }
      } else {
        return x;
      }
    };

    Util.prototype.deep_clone = function(x) {
      var clone, e, name, value, _i, _len;
      if (x != null) {
        switch (typeof x) {
          case 'null':
          case 'undefined':
            return x;
          case 'string':
          case 'number':
          case 'function':
          case 'boolean':
            return x;
          case 'object':
          case 'array':
            if (Array.isArray(x) || x instanceof Array) {
              clone = [];
              for (_i = 0, _len = x.length; _i < _len; _i++) {
                e = x[_i];
                clone.push(this.deep_clone(e));
              }
              return clone;
            } else {
              clone = {};
              for (name in x) {
                value = x[name];
                clone[name] = this.deep_clone(value);
              }
              return clone;
            }
            break;
          default:
            return x;
        }
      } else {
        return x;
      }
    };

    Util.prototype.count = function(array, value, max) {
      var count, elt, _i, _len;
      count = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        elt = array[_i];
        if (elt === value) {
          count++;
          if ((max != null) && count >= max) {
            break;
          }
        }
      }
      return count;
    };

    Util.prototype["for"] = function(init, cond, action, step, done) {
      if (init != null) {
        init();
      }
      while (cond()) {
        if (action != null) {
          action();
        }
        if (step != null) {
          step();
        }
      }
      if (done != null) {
        return done();
      }
    };

    Util.prototype.for_async = function(initialize, condition, action, increment, whendone) {
      var looper;
      looper = function() {
        if (condition()) {
          return action(function() {
            increment();
            return looper();
          });
        } else {
          if (whendone != null) {
            return whendone();
          }
        }
      };
      initialize();
      return looper();
    };

    Util.prototype.for_each = function(list, action, done) {
      if ((list != null) && (action != null)) {
        list.forEach(action);
      }
      if (done != null) {
        return done();
      }
    };

    Util.prototype.for_each_async = function(list, action, whendone) {
      var act, cond, i, incr, init, m;
      i = m = null;
      init = function() {
        return i = 0;
      };
      cond = function() {
        return i < list.length;
      };
      incr = function() {
        return i += 1;
      };
      act = function(next) {
        return action(list[i], i, list, next);
      };
      return this.for_async(init, cond, act, incr, whendone);
    };

    Util.prototype.for_each_of = function(map, action, whendone) {
      var key, value;
      if ((map != null) && (action != null)) {
        for (key in map) {
          value = map[key];
          action(key, value, map);
        }
      }
      if (whendone != null) {
        return whendone();
      }
    };

    Util.prototype.for_each_of_async = function(map, action, whendone) {
      var act, cond, i, incr, init, keys, m;
      keys = Object.keys(map);
      i = m = null;
      init = function() {
        return i = 0;
      };
      cond = function() {
        return i < keys.length;
      };
      incr = function() {
        return i += 1;
      };
      act = function(next) {
        return action(keys[i], map[keys[i]], map, next);
      };
      return this.for_async(init, cond, act, incr, whendone);
    };

    return Util;

  })();

  exports = exports != null ? exports : this;

  exports.Util = new Util();

}).call(this);
