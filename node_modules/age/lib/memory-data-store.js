// Generated by CoffeeScript 1.6.3
(function() {
  var DataStore, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, MemoryDataStore, Util, exports, fs, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  DataStore = require(path.join(LIB_DIR, 'data-store')).DataStore;

  Util = require(path.join(LIB_DIR, 'util')).Util;

  MemoryDataStore = (function(_super) {
    __extends(MemoryDataStore, _super);

    function MemoryDataStore() {
      this.enumerate_player_ids = __bind(this.enumerate_player_ids, this);
      this.get_player = __bind(this.get_player, this);
      this.record_achievement = __bind(this.record_achievement, this);
      this.record_event = __bind(this.record_event, this);
      this.record_player = __bind(this.record_player, this);
      MemoryDataStore.__super__.constructor.call(this);
      this.game_states = {};
    }

    MemoryDataStore.prototype.record_player = function(player, callback) {
      var _base, _name;
      if ((_base = this.game_states)[_name = player.id] == null) {
        _base[_name] = this.make_player(player);
      }
      return typeof callback === "function" ? callback() : void 0;
    };

    MemoryDataStore.prototype.record_event = function(player, event, callback) {
      var _base, _name;
      if ((_base = this.game_states)[_name = player.id] == null) {
        _base[_name] = this.make_player(player);
      }
      this.game_states[player.id].history.push(event);
      return typeof callback === "function" ? callback() : void 0;
    };

    MemoryDataStore.prototype.record_achievement = function(player, achievement, callback) {
      var _base, _name;
      if ((_base = this.game_states)[_name = player.id] == null) {
        _base[_name] = this.make_player(player);
      }
      this.game_states[player.id].achievements.push(achievement);
      return typeof callback === "function" ? callback() : void 0;
    };

    MemoryDataStore.prototype.get_player = function(player, callback) {
      var p;
      p = Util.deep_clone(this.game_states[player.id]);
      if (p == null) {
        p = {
          id: player.id,
          achievements: [],
          history: []
        };
        this.game_states[p.id] = p;
      }
      return typeof callback === "function" ? callback(null, p) : void 0;
    };

    MemoryDataStore.prototype.enumerate_player_ids = function(callback) {
      return callback(null, Object.keys(this.game_states));
    };

    return MemoryDataStore;

  })(DataStore);

  exports = exports != null ? exports : this;

  exports.MemoryDataStore = MemoryDataStore;

}).call(this);
